<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>io.fares.junit.soapui</groupId>
		<artifactId>soapui-junit-mockrunner-project</artifactId>
		<version>0.0.1</version>
	</parent>
	<artifactId>soapui-junit-mockrunner</artifactId>
	<packaging>jar</packaging>
	<name>SoapUI JUnit MockRunner</name>
	<description>This JUnit extension will bootstrap SoapUI Mock in its own classloader context to prevent clashes 
	with any project dependencies that are under test. The mockrunner uses Plexus Classworlds/Container and Aether
	to decouple the execution of the mock from the projects under test.</description>

	<dependencies>
		<!-- needed to compile against only, the resources will be loaded from 
			the classloader jail via aether -->
		<dependency>
			<groupId>com.smartbear.soapui</groupId>
			<artifactId>soapui</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>xmlbeans</groupId>
			<artifactId>xbean</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- used for the reflection runner -->
		<dependency>
			<groupId>org.unitils</groupId>
			<artifactId>unitils-core</artifactId>
		</dependency>

		<!-- obvious its a distributable junit extension -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
		</dependency>

		<!-- plexus -->
		<dependency>
			<groupId>org.eclipse.sisu</groupId>
			<artifactId>org.eclipse.sisu.inject</artifactId>
		</dependency>
		<dependency>
			<groupId>org.eclipse.sisu</groupId>
			<artifactId>org.eclipse.sisu.plexus</artifactId>
		</dependency>
		<dependency>
			<groupId>org.sonatype.sisu</groupId>
			<artifactId>sisu-guice</artifactId>
			<classifier>no_aop</classifier>
		</dependency>
		<dependency>
			<groupId>org.codehaus.plexus</groupId>
			<artifactId>plexus-utils</artifactId>
		</dependency>

		<!-- aether -->
		<dependency>
			<groupId>org.eclipse.aether</groupId>
			<artifactId>aether-api</artifactId>
		</dependency>
		<dependency>
			<groupId>org.eclipse.aether</groupId>
			<artifactId>aether-spi</artifactId>
		</dependency>
		<dependency>
			<groupId>org.eclipse.aether</groupId>
			<artifactId>aether-util</artifactId>
		</dependency>
		<dependency>
			<groupId>org.eclipse.aether</groupId>
			<artifactId>aether-impl</artifactId>
		</dependency>
		<dependency>
			<groupId>org.eclipse.aether</groupId>
			<artifactId>aether-connector-basic</artifactId>
		</dependency>
		<dependency>
			<groupId>org.eclipse.aether</groupId>
			<artifactId>aether-transport-file</artifactId>
		</dependency>
		<dependency>
			<groupId>org.eclipse.aether</groupId>
			<artifactId>aether-transport-http</artifactId>
		</dependency>
		<dependency>
			<groupId>org.apache.maven</groupId>
			<artifactId>maven-settings-builder</artifactId>
		</dependency>
		<dependency>
			<groupId>org.apache.maven</groupId>
			<artifactId>maven-aether-provider</artifactId>
		</dependency>

		<!-- common for testing mock -->
		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<scope>test</scope>
		</dependency>

		<!-- logging bindings for testing -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>jcl-over-slf4j</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>jul-to-slf4j</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-log4j12</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
			</resource>
		</resources>
		<plugins>
			<plugin>
				<groupId>org.codehaus.plexus</groupId>
				<artifactId>plexus-component-metadata</artifactId>
				<version>1.6</version>
				<executions>
					<execution>
						<id>process-classes</id>
						<goals>
							<goal>generate-metadata</goal>
						</goals>
					</execution>
					<execution>
						<id>process-test-classes</id>
						<goals>
							<goal>generate-test-metadata</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

</project>
